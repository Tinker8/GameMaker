<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ini Variables
//General
grav = 1.8;
hsp = 0;
vsp = 0;
jumpspeed = 18;
movespeed = 6;
hp = 100;
attack = 0;
jump_limit = 2;
jumping = 0;

//Enemy Stats
level = 1;
damage = 5;

hit = 0; //If hit by an attack = 1


attacks[0] = "melee";
attacks[1] = "ranged";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI/Movement

//AI Random monvement
key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("A"));
key_down = keyboard_check(ord("S"));
key_jump = keyboard_check_pressed(vk_space);



//Contact with the player
if (place_meeting(x-50,y,obj_char))
{
    
}



///Player Inputs and movement
key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("A"));
key_down = keyboard_check(ord("S"));
key_jump = keyboard_check_pressed(vk_space);



//Movement
move = key_right + key_left;
hsp = move * movespeed;

//???
if (vsp &lt; 10) vsp += grav;

//If char lands on ground, reset jumps
if (place_meeting(x,y+1,obj_terrain))
{
    jump_limit = 2;
    jumping = 0;
    
    //Movement only allowed on terrain
    //Crouching
    if (key_down &amp;&amp; move == 0 &amp;&amp; attack = 0)
    {
        sprite_index = sprite_crouch;
    }
    //Walking
    if (move != 0 &amp;&amp; jumping == 0 &amp;&amp; attack = 0)
    {
        sprite_index = sprite_walking;
        image_speed = 0.25;
        //image_xscale = move;
        sword.image_xscale = move;
    }
    //Idle
    if (move == 0 &amp;&amp; jumping == 0 &amp;&amp; !key_down &amp;&amp; attack = 0)
    {
        sprite_index = sprite_idle;
        image_speed = 0.1;
    }
}

if (key_jump &amp;&amp; jump_limit &gt; 0)
{
    jumping = 1;
    vsp = key_jump * -jumpspeed;
    jump_limit --;
    sprite_index = sprite_jump;
}

if (move != 0) image_xscale = move;

//Allows player to walk up steps
if (place_meeting(x+hsp,y,obj_terrain) &amp;&amp; !place_meeting(x+hsp,y-16,obj_terrain)) {y -= 8;}

//Horizontal Collision/Wall Collision
if (place_meeting(x+hsp,y,obj_terrain))
{

    while(!place_meeting(x+sign(hsp),y,obj_terrain))
    {
    
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_terrain))
{
    while(!place_meeting(x,y+sign(vsp),obj_terrain))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
